package   {	import com.jeromelacote.color_match.Cell;	import com.jeromelacote.color_match.Difficulty_selection_UI;	import com.jeromelacote.color_match.Painting;	import com.jeromelacote.color_match.PopupEvent;	import com.jeromelacote.color_match.PopupGameOverPopup;	import com.jeromelacote.color_match.PopupInfo;	import com.jeromelacote.color_match.PopupLevelSelect;	import com.jeromelacote.color_match.PopupUnlock;	import com.jeromelacote.color_match.StorageManager;	import com.jeromelacote.mylib.FileUtilities;//	import com.jeromelacote.mylib.FramerateTracker;	import com.jeromelacote.mylib.SubController;	import com.jeromelacote.mylib.UIEventDispatcher;	import com.jeromelacote.mylib.Utilities;		//	import com.sticksports.nativeExtensions.inAppPurchase.IAPProduct;//	import com.sticksports.nativeExtensions.inAppPurchase.IAPTransaction;//	import com.sticksports.nativeExtensions.inAppPurchase.InAppPurchase;		import flash.display.FrameLabel;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;	import flash.events.TransformGestureEvent;	import flash.filters.ColorMatrixFilter;	import flash.geom.Rectangle;	import flash.media.Sound;	import flash.media.StageWebView;	import flash.net.SharedObject;	import flash.net.SharedObjectFlushStatus;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.system.Capabilities;	import flash.text.TextField;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;	import flash.utils.Dictionary;	import flash.utils.Timer;	import flash.utils.getTimer;		import caurina.transitions.Tweener;
	public class Color_match extends MemArtScene_mc {				public var webView:StageWebView = new StageWebView();		//public var FramerateTracker_mc:FramerateTracker=new FramerateTracker();		public var left:uint = 37;		public var up:uint = 38;		public var right:uint = 39;		public var down:uint = 40;		public var space:uint = 32;		private var first_tile:Cell;		private var second_tile:Cell;		private var pause_timer:Timer;		private var gridSize:Number=4;		private var gridWidth:Number=160;		private var container:MovieClip;		private var gamePosX:Number;		private var gamePosY:Number;			private var colordeck:Array ;		private var bgArt:Painting;		private var popup:PopupGameOverPopup=new PopupGameOverPopup();		private var popupUnlock:PopupUnlock;		private var infopopup:PopupInfo=new PopupInfo();		private var sceneselect:PopupLevelSelect;		private var difficultyselect:Difficulty_selection_UI=new Difficulty_selection_UI();		private var numClick:Number;		public var my_dater:Timer;		public var endtime:String;		public var start_time:Number		public var so:SharedObject = SharedObject.getLocal("colorMatchObject");		public var _DEBUG: Boolean=false;		public var imageCollec:Array=new Array("img1","img2","img3","img4","img5","img6","img7","img8","img9","img10","img11","img12","img13","img14","img15","img16","img17","img18","img19","img20","img21","img22","img23","img24","img25","img26","img27","img28","img29","img30","img31","img32","img33","img34","img35","img36");		public var mydata:FileUtilities=new FileUtilities();		public var utilities:Utilities = new Utilities();				private var completePurchases : Dictionary = new Dictionary();		private var failedPurchases : Dictionary = new Dictionary();		private var restoredPurchases : Dictionary = new Dictionary();		//		public var ft:FramerateTracker=new FramerateTracker();				//private var myRequest:URLRequest = new URLRequest("data/json.txt");		public var zedata:FileUtilities=new FileUtilities();				private var myLoader = new URLLoader();				public function Color_match() {						feedback.text="Color_match";			feedback.visible=true;//			StorageManager.instance.eraseSaveData();			StorageManager.instance.init();					//	WriteFeedback(zedata.Read("jsondata").toString());		///	//			if(InAppPurchase.isSupported){//				InAppPurchase.restorePurchases();//			}												UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_REPLAY, replay);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_PLAYNEXTLEVEL, playNextlevel);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_BACKHOME, backHome);				UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_BACK, back);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_PLAYLEVEL, playLevel);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_HIDEINFO, hideInfo);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_DIFFICULTYSELECTED, ShowSceneSelect);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_UPDATEPAGE, updatePage);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_SHOWUNLOCKPOPUP, showUnlockPopup);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_HIDEUNLOCKPOPUP, hideUnlockPopup);			UIEventDispatcher.INSTANCE.addEventListener(PopupEvent.ON_BUYUNLOCK, buyUnlock);						//stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDownListener);//////////////ADS			//createWebView("http://www.supermika.com/appdata/ads/artmemory.html",ads_pos.x,ads_pos.y,ads_pos.width,ads_pos.height);			hideAd();			ads_pos.visible=false;			/////////////SET BUTTON			info_btn.visible=false;			backhome_btn.visible=false;			back_btn.visible=false;			info_btn.buttonMode=true;			info_btn.addEventListener(MouseEvent.CLICK, onClick);			backhome_btn.buttonMode=true;			backhome_btn.addEventListener(MouseEvent.CLICK, onClick);			back_btn.buttonMode=true;			back_btn.addEventListener(MouseEvent.CLICK, onClick);						restore_btn.addEventListener(MouseEvent.CLICK, onClick);			restore_btn.mouseChildren=false;			restore_btn.buttonMode=true;			restore_btn.visible=true;			///////////////Frametracker//			if (_DEBUG==true){//				addChild(FramerateTracker_mc);//				FramerateTracker_mc.x=70;FramerateTracker_mc.y=20;//			}						ShowDifficultySelect();						var mytest:InAppPurchaseExtensionTest= new InAppPurchaseExtensionTest();			addChild(mytest);			mytest.visible=feedback.visible=false;					//	myLoader.addEventListener(Event.COMPLETE, onload);		//	myLoader.load(myRequest);			}				public function restoreMyPurchase():String{return "blah";}		public function UnlockLevelPurchase(name:String) : void{}		///////////IN APP PURCHASE////////////////				/*				function restoreMyPurchase():String{				if(InAppPurchase.isSupported){		InAppPurchase.restorePurchases();		return "Purchases Restored";		}else{		return "InApp Purchases Disabled";		}		}								public function UnlockScenePurchase( ) : void{						if(InAppPurchase.isSupported){				InAppPurchase.fetchProductInformation("com.supermika.MikasWorldFree.Unlock01" );//InAppPurchase.fetchProductInformation( "consumable1", "nonconsumable1" );				InAppPurchase.productInformationReceived.add( productInformationReceived );				InAppPurchase.productInformationFailed.add( productInformationFailed );								InAppPurchase.purchaseProduct("com.supermika.MikasWorldFree.Unlock01", 1);				InAppPurchase.transactionPurchased.add( purchaseComplete );				InAppPurchase.transactionFailed.add( purchaseFailed );				InAppPurchase.transactionRestored.add( purchaseRestored );			}					}				public function UnlockLevelPurchase(name:String) : void{			feedback.appendText( "\n    UnlockLevelPurchase: " + name );			if(InAppPurchase.isSupported){				feedback.appendText( "InAppPurchase.isSupported " );					InAppPurchase.fetchProductInformation("com.supermika.MemoryArt.Unlock01");//InAppPurchase.fetchProductInformation( "consumable1", "nonconsumable1" );				InAppPurchase.productInformationReceived.add( productInformationReceived );				InAppPurchase.productInformationFailed.add( productInformationFailed );								InAppPurchase.purchaseProduct("com.supermika.MemoryArt.Unlock01", 1);				InAppPurchase.transactionPurchased.add( purchaseComplete );				InAppPurchase.transactionFailed.add( purchaseFailed );				InAppPurchase.transactionRestored.add( purchaseRestored );			}else{				feedback.appendText( "InAppPurchase.is NOT Supported " );				}		}				public function purchaseComplete( transaction : IAPTransaction ) : void		{			completePurchases[ transaction.id ] = transaction;			feedback.appendText( "\n> transactionComplete id: " + transaction.id+ "product: " + transaction.productId );			outputTransactionDetails( transaction );			validatePurchase(transaction.productId);			validateUnlock(); //TO TEST		}				public function validatePurchase(pid:String){			if (pid=="com.supermika.MemoryArt.Unlock03" && StorageManager.instance.unlockLevel<3) {				StorageManager.instance.unlockLevel=3;			}else if (pid=="com.supermika.MemoryArt.Unlock02" && StorageManager.instance.unlockLevel<2) {				StorageManager.instance.unlockLevel=2;			}else if (pid=="com.supermika.MemoryArt.Unlock01" && StorageManager.instance.unlockLevel<1) {				StorageManager.instance.unlockLevel=1;			}			StorageManager.instance.writeSaveData()					}								public function purchaseFailed( transaction : IAPTransaction ) : void		{			if( transaction )			{				failedPurchases[ transaction.id ] = transaction;				feedback.appendText( "\n> purchaseFailed id: " + transaction.id+ "product: " + transaction.productId );				outputTransactionDetails( transaction );			}			else			{				feedback.appendText( "\n> transactionFailed. No transaction object returned." );			}		}				public function purchaseRestored( transaction : IAPTransaction ) : void		{			restoredPurchases[ transaction.id ] = transaction;			feedback.appendText( "\n> transactionRestored" );			outputTransactionDetails( transaction );			validatePurchase(transaction.productId);;		}		public function outputTransactionDetails( transaction : IAPTransaction ) : void		{			feedback.appendText( "\n  id: " + transaction.id );			feedback.appendText( "\n    product: " + transaction.productId );			feedback.appendText( "\n    quantity: " + transaction.productQuantity );			feedback.appendText( "\n    state: " + transaction.state );			feedback.appendText( "\n    date: " + transaction.date );			if( transaction.error )			{				feedback.appendText( "\n    error: " + transaction.error.errorID + ", " + transaction.error.errorID );			}			if( transaction.receipt )			{				feedback.appendText( "\n    receipt received, length " + transaction.receipt.length );			}			if( transaction.originalTransaction )			{				feedback.appendText( "\n    originalTransaction: " );				feedback.appendText( "\n    id: " + transaction.originalTransaction.id );				feedback.appendText( "\n      product: " + transaction.originalTransaction.productId );				feedback.appendText( "\n      quantity: " + transaction.originalTransaction.productQuantity );				feedback.appendText( "\n      state: " + transaction.originalTransaction.state );				feedback.appendText( "\n      date: " + transaction.originalTransaction.date );			}		}		public function productInformationReceived( products : Array ) : void		{			InAppPurchase.productInformationReceived.remove( productInformationReceived );			InAppPurchase.productInformationFailed.remove( productInformationFailed );			feedback.appendText( "\n  productInformationReceived" );			for each( var product : IAPProduct in products )			{				feedback.appendText( "\n  id: " + product.id );				feedback.appendText( "\n    title: " + product.title );				feedback.appendText( "\n    description: " + product.desc );				feedback.appendText( "\n    price: " + product.price );				feedback.appendText( "\n    formattedPrice: " + product.formattedPrice );				feedback.appendText( "\n    locale: " + product.priceLocale );			}		}				public function productInformationFailed() : void		{			InAppPurchase.productInformationReceived.remove( productInformationReceived );			InAppPurchase.productInformationFailed.remove( productInformationFailed );			feedback.appendText( "\n  productInformationFailed" );		}		////////////////////////////////////////	*/			public function WriteFeedback(st:String):void{			if(feedback !=null){			feedback.appendText( "/n   " + st );			}		}				public function ShowDifficultySelect():void{			difficultyselect= new Difficulty_selection_UI();			addChild(difficultyselect);		}							public function ShowSceneSelect(e:PopupEvent):void{			backhome_btn.visible=true;			restore_btn.visible=false;			removeChild(difficultyselect);			trace ("difficulty "+StorageManager.instance.difficulty);			sceneselect= new PopupLevelSelect(1,StorageManager.instance.unlockLevel);			addChild(sceneselect);		}						public function showUnlockPopup(e:PopupEvent):void{			popupUnlock= new PopupUnlock(e.data[1]);			addChild(popupUnlock);					}				public function hideUnlockPopup(e:PopupEvent):void{			removeChild(popupUnlock);			}			public function buyUnlock(e:PopupEvent):void{			var unlockID=new Array("Unlock01","Unlock02","Unlock03");			feedback.appendText( "/n  buyUnlock: " + unlockID[StorageManager.instance.unlockLevel] );			trace (unlockID[StorageManager.instance.unlockLevel]+ " :buyUnlock Level: "+e.data[1]);				UnlockLevelPurchase(unlockID[StorageManager.instance.unlockLevel]);			//UnlockScenePurchase();						//validateUnlock();//			var tr:IAPTransaction=new IAPTransaction();//			tr.productId="com.supermika.MemoryArt.Unlock03";//			purchaseComplete(tr)		}			public function validateUnlock():void{			//StorageManager.instance.unlockLevel+=1;			//StorageManager.instance.writeSaveData()			if(this.contains(popupUnlock)){			removeChild(popupUnlock);			}			removeChild(sceneselect);			sceneselect= new PopupLevelSelect(StorageManager.instance.unlockLevel,StorageManager.instance.unlockLevel);			addChild(sceneselect);					}				function soCreation():void{			try {				var flushStatus:String = so.flush(512000);				if (flushStatus == SharedObjectFlushStatus.PENDING) {					/* If the flush status is pending the user will be presented with a prompt					requesting the extra storage space. We need to add an event listener					here to capture their response.*/					writeLog('need extra storage space');										so.addEventListener( NetStatusEvent.NET_STATUS, soStatusListener);				} else if (flushStatus == SharedObjectFlushStatus.FLUSHED) {					// Shared object was successfully stored on disk					writeLog('SharedObjectFlushStatus.FLUSHED OK');				}			} catch(e:Error) {				// Error will occur if the user has disallowed local storage globally				writeLog('error'+e);			}		}						function soStatusListener(e:NetStatusEvent):void		{			if (e.info.code == "SharedObject.Flush.Success") {				/* The user approved your request for storage greater than				100KB and your SharedObject was written successfully.*/				writeLog('SharedObject.Flush.Success');			} else if (e.info.code == "SharedObject.Flush.Failed") {				/* The user denied your request for storage greater than				100KB. No data was written to disk.*/				writeLog('SharedObject.Flush.Failed');			}			so.removeEventListener( NetStatusEvent.NET_STATUS, soStatusListener);		}		public function writeLog(str:String) {			if(_DEBUG==true){			var screenInfoTxt:TextField = new TextField();			screenInfoTxt.x = 100;			screenInfoTxt.y = 500;			screenInfoTxt.width = 300;			screenInfoTxt.height = 100;			screenInfoTxt.border = true;			addChild(screenInfoTxt);			screenInfoTxt.text=str;			}			trace ("DEBUG: "+str);					}		function showAd(){						webView.stage = this.stage;			title_mc.visible=false;		}				function hideAd(){			webView.stage = null;			title_mc.visible=true;		}				function createWebView(url:String,thex:Number,they:Number,thewidth:Number,theheight:Number){			webView.stage = this.stage;			webView.viewPort = new Rectangle( thex, they, thewidth, theheight );			var req:URLRequest = new URLRequest(url);			var ldr:URLLoader = new URLLoader();						ldr.addEventListener(Event.COMPLETE,loadedWebview);			ldr.load(req);		}				function loadedWebview(e:Event){			webView.loadString(e.target.data);		}						public function replay(e:PopupEvent) {			startgame();			trace ("->replay");		}				public function playLevel(e:PopupEvent) {			//level=Number(e.data);			removeChild(sceneselect);			startgame();			trace ("->playLevel"+StorageManager.instance.current_level[StorageManager.instance.difficulty]);		}				public function playNextlevel(e:PopupEvent) {			removeChild(container);			removeChild(bgArt);			StorageManager.instance.current_level[StorageManager.instance.difficulty];			startgame();			trace ("->playNextlevel");		}				public function backHome(e:PopupEvent) {			removeChild(sceneselect);			ShowDifficultySelect();			backhome_btn.visible=false;			restore_btn.visible=true;		}				public function updatePage(e:PopupEvent) {			StorageManager.instance.currentPage=e.data[1];			trace("updatePage."+StorageManager.instance.currentPage);		}				public function back(e:PopupEvent) {			removeChild(container);			removeChild(bgArt);			sceneselect= new PopupLevelSelect(StorageManager.instance.currentPage,StorageManager.instance.unlockLevel);			addChild(sceneselect);			info_btn.visible=false;			back_btn.visible=false;			backhome_btn.visible=true;			restore_btn.visible=false;			hideAd();			trace ("->back");		}						function keyDownListener(e:KeyboardEvent) {						trace(e.keyCode.toString());						 if (e.keyCode==down){					 startgame();			}			else if (e.keyCode==space){				gameOver();			}					}				public function onClick(e:MouseEvent) 		{			trace ("->onClick "+e.target);			if (e.target==info_btn){				infopopup=new PopupInfo();				addChild(infopopup);				var ievt:PopupEvent = new PopupEvent( PopupEvent.ON_SETINFO );				ievt.data=new Array(StorageManager.instance.current_level[StorageManager.instance.difficulty],endtime,numClick,StorageManager.instance.current_level[StorageManager.instance.difficulty]);				UIEventDispatcher.INSTANCE.dispatchEvent(ievt);				hideAd();							}else if(e.target==backhome_btn){				var evt:PopupEvent = new PopupEvent( PopupEvent.ON_BACKHOME );				UIEventDispatcher.INSTANCE.dispatchEvent(evt);			}else if(e.target==back_btn){				var evt2:PopupEvent = new PopupEvent( PopupEvent.ON_BACK );				UIEventDispatcher.INSTANCE.dispatchEvent(evt2);			}else if(e.target==restore_btn){				trace ("restore");				(e.target as MovieClip).label_txt.text=restoreMyPurchase();				}		}				public function hideInfo(e:PopupEvent) {			if (this.contains(infopopup)){				removeChild(infopopup);			}			infopopup=null;			showAd();		}				public function startgame() {						showAd();			info_btn.visible=true;			back_btn.visible=true;			backhome_btn.visible=false;			restore_btn.visible=false;			first_tile=second_tile=null;			colordeck = new Array();						//Set difficulty			StorageManager.instance.difficulty			if (StorageManager.instance.difficulty==1){						gridSize=2;	//2*2			} 			else if (StorageManager.instance.difficulty==2) {					gridSize=4;	//4*4			}			else if (StorageManager.instance.difficulty==3) {				gridSize=6;	//6*6			}			else if (StorageManager.instance.difficulty==4) {				gridSize=8;	//8*8			}						gridWidth=640/gridSize;			var counter=0;			var tileid=1;			for (var i=1; i<=(gridSize*gridSize); i++) {				counter++;				colordeck.push(tileid)				if(counter==2){					counter=0;					tileid++;				}			}			trace ("colordeck: "+colordeck);						container=null;			container= new MovieClip();			gamePosX=(stage.stageWidth-(gridWidth*gridSize))/2;			gamePosY=(stage.stageHeight-(gridWidth*gridSize))/2;						bgArt= new Painting()			bgArt.x = gamePosX;			bgArt.y = gamePosY;			var bgArtFilter:ColorMatrixFilter= new ColorMatrixFilter([0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0,0,0,1,0,0,0,0,0,1]);			bgArt.filters=new Array(bgArtFilter);			addChild(bgArt);			bgArt.loadImg(imageCollec[StorageManager.instance.current_level[StorageManager.instance.difficulty]-1]);			container.x = gamePosX;			container.y = gamePosY;			addChild(container);			//addChild(popup);				//init			//colordeck = new Array(1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8);			numClick=0;						for (x=1; x<=gridSize; x++) {				for (y=1; y<=gridSize; y++) {					var random_card = Math.floor(Math.random()*colordeck.length);										//var tile:colors = new colors();					var tile:Cell = new Cell();					tile.init(gridWidth)					tile.id = colordeck[random_card];					var row:Number=(tile.id -1)%gridSize	;					var col:Number=Math.floor((tile.id -1)/gridSize);					colordeck.splice(random_card,1);					tile.img.loadTile(imageCollec[StorageManager.instance.current_level[StorageManager.instance.difficulty]-1],col*gridWidth,row*gridWidth,gridWidth);					hideTile(tile);					tile.x = (x-1)*gridWidth;					tile.y = (y-1)*gridWidth;					tile.addEventListener(MouseEvent.CLICK,tile_clicked);					container.addChild(tile);				}			}					}				public function startTimer() {		start_time=getTimer();		}				public function tile_clicked(event:MouseEvent) {			numClick++;			if (numClick==1){			startTimer()			}			trace("length"+container.numChildren);			var clicked:Cell= (event.currentTarget as Cell);			if (first_tile == null) {				first_tile = clicked;				showTile(clicked);			}			else if (second_tile == null && first_tile != clicked) {				second_tile = clicked;				showTile(clicked);				if (first_tile.id == second_tile.id) {					pause_timer = new Timer(200,1);					pause_timer.addEventListener(TimerEvent.TIMER_COMPLETE,remove_tiles);					pause_timer.start();				}				else {					pause_timer = new Timer(1000,1);					pause_timer.addEventListener(TimerEvent.TIMER_COMPLETE,reset_tiles);					pause_timer.start();				}			}		}				public function showTile(mc){			Tweener.addTween(mc.secret_mc,{alpha:0,time:.1,delay:0,transition:'linear'});		}				public function hideTile(mc){			Tweener.addTween(mc.secret_mc,{alpha:1,time:.3,delay:0,transition:'linear'});		}				public function reset_tiles(event:TimerEvent) {			hideTile(first_tile);			hideTile(second_tile);			first_tile = null;			second_tile = null;			pause_timer.removeEventListener(TimerEvent.TIMER_COMPLETE,reset_tiles);			var mysound:SndClic=new SndClic();			mysound.play();			}				public function remove_tiles(event:TimerEvent) {			Tweener.addTween(first_tile,{scaleX:0,time:.2,delay:0,transition:'linear',onComplete:kill, onCompleteParams:[first_tile]});			Tweener.addTween(second_tile,{scaleX:0,time:.2,delay:0.15,transition:'linear',onComplete:kill, onCompleteParams:[second_tile]});			first_tile = null;			second_tile = null;			pause_timer.removeEventListener(TimerEvent.TIMER_COMPLETE,remove_tiles);			var success:SndSuccess=new SndSuccess();			success.play();		}		public function kill(mc:MovieClip) {		container.removeChild(mc);		//test victory				if(container.numChildren==0){		gameOver();		}	}		public function gameOver() {			trace ("you win" + StorageManager.instance.current_level[StorageManager.instance.difficulty]);				var thislaptime:Date= new Date(getTimer()-start_time);		endtime=formatTime(thislaptime);		//trace ("endtime: "+endtime);		bgArt.filters=null;		addChild(popup);		var evt:PopupEvent = new PopupEvent( PopupEvent.ON_SETDATA );		evt.data=new Array(thislaptime.valueOf(),endtime,numClick,StorageManager.instance.current_level[StorageManager.instance.difficulty],StorageManager.instance.difficulty);		UIEventDispatcher.INSTANCE.dispatchEvent(evt);		StorageManager.instance.current_level[StorageManager.instance.difficulty]+=1;				if(StorageManager.instance.current_level[StorageManager.instance.difficulty]>StorageManager.instance.top_level[StorageManager.instance.difficulty]){				StorageManager.instance.top_level[StorageManager.instance.difficulty]=StorageManager.instance.current_level[StorageManager.instance.difficulty];			trace ("increment toplevel: UNLOCKED: "+ StorageManager.instance.top_level[StorageManager.instance.difficulty]);			StorageManager.instance.writeSaveData()		}	}			function formatTime(d:Date):String{		var str:String="";		str=("00"+d.minutes).substr(-2)+":"+("00"+d.seconds).substr(-2);//":"+("000"+d.milliseconds).substr(-3);		return str;	}		function toggleWebview(){				if(webView.stage == this.stage){			webView.stage = null;		}else{			webView.stage = this.stage;		}	}	}}