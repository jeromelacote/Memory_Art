package com.jeromelacote.exploration{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.filters.DropShadowFilter;	import flash.filters.GlowFilter;	import flash.geom.Matrix;	import flash.geom.Rectangle;		public class Creature extends MovieClip			{		static var myfilters:Array=new Array();		public var filtersize:Number;		public function Creature() 		{						super();			addEventListener(MouseEvent.MOUSE_DOWN, creatureMouseDown);			addEventListener(MouseEvent.MOUSE_UP, creatureMouseUp);			addEventListener(MouseEvent.MOUSE_OUT, creatureMouseUp);			filtersize=filters.length;			//rasterizeMe()						/*			for (var i:int = 0; i < filters.length; i++) 			{					myfilters.push(filters[i].clone());			}*/		//trace ("==================/mc/"+myfilters);		}				public function rasterizeMe():void {						// Creates a BitmapData Object with the same width and height that the 'dog'			///var bitmapData:BitmapData = new BitmapData( this.width, this.height );			// Call the draw() method passing the dog reference as the only one parameter			//bitmapData.draw( this );			// Display the capture using a Bitmap container						// get the transformation matrix applied to the dog			///var matrix:Matrix = this.transform.matrix;			// provide the matrix object while drawing						/* Get the bounding box of the dog using the container of the dog as the origin of the coordinate system			Here, I provide this, which refers to the root of the animation, so I will get a Rectangle relative to the top left of the stage */			///var rect:Rectangle = getBounds( this );			/* Apply a translation to the Matrix object using the x and y property of the Rectangle (bounding box) object */			///matrix.translate( -rect.x, -rect.y );			//bitmapData.draw ( dog, matrix );			///bitmapData.draw ( oursins, matrix, this.transform.colorTransform );			//bitmapData.draw ( oursins );			///addChild ( new Bitmap( bitmapData ) );		}				public function creatureMouseUp(e:Event):void {			//trace("->creatureMouseUp "+ e.target.name);			var mc=e.target;			var i:int;			var DSfilter:DropShadowFilter;						//filters=myfilters;			var filter1:GlowFilter =new GlowFilter(0x000000, 1, 5, 5, 20, 3, false, false);			var filter2:DropShadowFilter=new DropShadowFilter(7, 65, 0x000000, 1, 5, 5, 0.4, 1, false, false, false);			//trace ("//////////////////mc/"+myfilters);			if(filtersize>1){			filters=[filter1,filter2];			} else if(filtersize==1){				filters=[filter2];			} if(filtersize==0){				filters=[];			}		}		public function creatureMouseDown(e:Event):void {			//trace("->creatureMouseDown "+ e.target.name);			var mc=e.target;			//myfilterss=mc.filters;			var filter1:GlowFilter =new GlowFilter(0x000000, 1, 5, 5, 20, 3, false, false);			//var filter2:DropShadowFilter=new DropShadowFilter(7, 65, 0x000000, 1, 5, 5, 0.4, 1, false, false, false);			//mc.filters=[filter1,filter2];			//filters=[];			if(filtersize>1){			filters=[filter1];			}else{			filters=[];			}			}	}}